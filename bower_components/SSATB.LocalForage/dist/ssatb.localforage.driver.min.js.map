{"version":3,"sources":["localForage-ssatbDriver.js","localForage-ssatbHttpProvider.js","ssatb.authtokenrefresh.js"],"names":["localforageSsatbDriver","DRIVER_NAME","_initStorage","options","self","this","_apiInfo","apiInfo","Promise","resolve","appendServiceResponseHeaders","obj","jqXHR","headers","headersStr","getAllResponseHeaders","headersArray","split","i","header","kvs","key","trim","length","val","console","warn","responseHeaders","iterate","iterator","callback","promise","reject","ready","then","getDefaultApiDetails","$","ajax","method","verb","url","Url","Headers","global","cache","dataType","contentType","done","items","item","keyProperty","fail","textStatus","errorThrown","getServerError","executeCallback","getItem","apiDetails","getApiDetails","serviceName","responseStatus","setItem","value","data","JSON","stringify","response","removeItem","window","String","clear","n","keys","result","error","api","apiHashmap","defaultKey","firstKey","status","statusText","responseJSON","module","exports","require","ModuleType","DEFINE","EXPORT","WINDOW","moduleType","define","amd","driver","_driver","_support","localforage","defineDriver","call","angular","provider","$localForageProvider","getApiNameByUrl","isObject","_config","service","forEach","toLowerCase","indexOf","config","Error","extend","interceptorFactories","interceptors","$get","$localForage","$q","$injector","ssatbHttp","requestConfig","isString","uppercase","requestInterceptors","responseInterceptors","when","reversedInterceptors","interceptor","request","requestError","unshift","responseError","push","chainInterceptors","substring","createShortMethods","names","arguments","name","createShortMethodsWithData","ii","thenFn","rejectFn","interceptorFactory","get","invoke","authTokenRefreshService","$window","$http","refreshToken","refreshTokenBaseUrl","refreshTokenComplete","refreshTokenUrl","messageInterceptorsConfig","$provide","errorResponse","getServiceNameFromApiInfo","apiInfoObject","ServiceName","deferred","defer","_localforage","isUndefined","retry","errorHandler","_retrySsatbHttpRequest","$ssatbHttp","alertDialog","ssatbHttpProvider"],"mappings":"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","file":"ssatb.localforage.driver.min.js","sourcesContent":["/*\r\n * ----------------------------------------\r\n *\r\n * Based on https://github.com/mozilla/localForage/blob/master/src/drivers/websql.js\r\n *\r\n */\r\nvar localforageSsatbDriver = {\r\n    DRIVER_NAME : 'localForage-SsatbDriver'\r\n};\r\n(function () {\r\n    'use strict';\r\n\r\n    // Promises!\r\n    var Promise = (typeof module !== 'undefined' && module.exports) ?\r\n        require('promise') : this.Promise;\r\n\r\n    var globalObject = this;\r\n    var serializer = null;\r\n\r\n\r\n    var ModuleType = {\r\n        DEFINE: 1,\r\n        EXPORT: 2,\r\n        WINDOW: 3\r\n    };\r\n\r\n    // Attaching to window (i.e. no module loader) is the assumed,\r\n    // simple default.\r\n    var moduleType = ModuleType.WINDOW;\r\n\r\n    // Find out what kind of module setup we have; if none, we'll just attach\r\n    // localForage to the main window.\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n        moduleType = ModuleType.EXPORT;\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        moduleType = ModuleType.DEFINE;\r\n    }\r\n\r\n    function _initStorage(options) {\r\n        var self = this;\r\n        var apiInfo = null;\r\n        if (options) {\r\n            self._apiInfo = options.apiInfo;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    function appendServiceResponseHeaders(obj, jqXHR) {\r\n        var headers = null;\r\n        if (obj != null)\r\n            if (jqXHR != null) {\r\n                var headersStr = jqXHR.getAllResponseHeaders();\r\n                var headersArray = headersStr.split(\"\\n\");\r\n                var headers = {};\r\n                for (var i in headersArray) {\r\n                    var header = headersArray[i];\r\n                    var kvs = header.split(\":\");\r\n                    var key = kvs[0];\r\n                    if (key) {\r\n                        key = key.trim();\r\n                        if (key.length != 0) {\r\n                            var val = kvs[1];\r\n                            if (val)\r\n                                val = val.trim();\r\n                            headers[key] = val;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n                console.warn(\"jqXHR is null. Headers not populated\");\r\n        if (headers != null)\r\n            obj.responseHeaders = headers;\r\n        return obj;\r\n    }\r\n\r\n    function iterate(iterator, callback) {\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n                var apiInfo = getDefaultApiDetails(self._apiInfo);\r\n\r\n                $.ajax({\r\n                    method: apiInfo.iterate.verb ? apiInfo.iterate.verb : \"GET\",\r\n                    url: apiInfo.Url + apiInfo.iterate.url,\r\n                    headers: apiInfo.Headers,\r\n                    global: false,\r\n                    cache: false,\r\n                    dataType: \"json\",\r\n                    contentType: 'application/json; charset=utf-8',\r\n                }).done(function (items) {\r\n                    var length = items.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        var item = items[i];\r\n                        item = iterator(item, item[apiInfo.iterate.keyProperty],\r\n                                   i + 1);\r\n                        if (item !== void (0)) {\r\n                            resolve(item);\r\n                            return;\r\n                        }\r\n                    }\r\n                    resolve();\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    reject(getServerError(apiInfo, jqXHR, textStatus, errorThrown));\r\n                });\r\n\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function getItem(key, callback) {\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n                var apiDetails = getApiDetails(key);\r\n                var apiInfo = self._apiInfo[apiDetails.serviceName];\r\n\r\n                $.ajax({\r\n                    method: apiDetails.verb,\r\n                    url: apiInfo.Url + apiDetails.url,\r\n                    dataType: \"json\",\r\n                    global: false,\r\n                    cache: false,\r\n                    contentType: 'application/json; charset=utf-8',\r\n                    headers: apiInfo.Headers\r\n                }).done(function (obj, responseStatus, jqXHR) {\r\n                    resolve(appendServiceResponseHeaders(obj, jqXHR));\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    reject(getServerError(apiDetails,jqXHR, textStatus, errorThrown));\r\n                });\r\n\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n    function setItem(key, value, callback) {\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n                var apiDetails = getApiDetails(key);\r\n                var apiInfo = self._apiInfo[apiDetails.serviceName];\r\n\r\n                $.ajax({\r\n                    method: apiDetails.verb,\r\n                    url: apiInfo.Url + apiDetails.url,\r\n                    dataType: \"json\",\r\n                    global: false,\r\n                    cache: false,\r\n                    contentType: 'application/json; charset=utf-8',\r\n                    headers: apiInfo.Headers,\r\n                    data: JSON.stringify(value)\r\n                }).done(function (response, responseStatus, jqXHR) {\r\n                    value.response = response;\r\n                    resolve(appendServiceResponseHeaders(value, jqXHR));\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    reject(getServerError(apiDetails, jqXHR, textStatus, errorThrown));\r\n                });\r\n\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function removeItem(key, callback) {\r\n        var self = this;\r\n\r\n        // Cast the key to a string, as that's all we can set as a key.\r\n        if (typeof key !== 'string') {\r\n            window.console.warn(key +\r\n                ' used as a key, but it is not a string.');\r\n            key = String(key);\r\n        }\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n                var apiDetails = getApiDetails(key);\r\n                var apiInfo = self._apiInfo[apiDetails.serviceName];\r\n                $.ajax({\r\n                    method: apiDetails.verb,\r\n                    url: apiInfo.Url + apiDetails.url,\r\n                    global: false,\r\n                    cache: false,\r\n                    headers: apiInfo.Headers\r\n                }).done(function () {\r\n                    resolve()\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    reject(getServerError(apiDetails, jqXHR, textStatus, errorThrown));\r\n                });\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function clear(callback) {\r\n        var self = this;\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function length(callback) {\r\n        var self = this;\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function key(n, callback) {\r\n        var self = this;\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n            }).catch(reject);\r\n        });\r\n\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function keys(callback) {\r\n        var self = this;\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.ready().then(function () {\r\n            }).catch(reject);\r\n        });\r\n        executeCallback(promise, callback);\r\n        return promise;\r\n    }\r\n\r\n    function executeCallback(promise, callback) {\r\n        if (callback) {\r\n            promise.then(function (result) {\r\n                callback(null, result);\r\n            }, function (error) {\r\n                callback(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    function getApiDetails(key) {\r\n        var api = key.split(\"|\");\r\n        return {\r\n            serviceName: api[0],\r\n            verb: api[1],\r\n            url: api[2]\r\n        };\r\n    }\r\n    function getDefaultApiDetails(apiHashmap) {\r\n        var defaultKey = null;\r\n        for (var firstKey in apiHashmap) {\r\n            defaultKey = firstKey;\r\n            break;\r\n        }\r\n        if (defaultKey == null)\r\n            return null;\r\n        return apiHashmap[defaultKey];\r\n    }\r\n\r\n    function getServerError(apiDetails, jqXHR, textStatus, errorThrown) {\r\n        return {\r\n            serviceName: apiDetails.serviceName,\r\n            method: apiDetails.verb,\r\n            status: jqXHR.status,\r\n            url: apiDetails.url,\r\n            statusText: textStatus,\r\n            errorThrown: errorThrown,\r\n            data: jqXHR.responseJSON\r\n        };\r\n    }\r\n\r\n\r\n    var driver = {\r\n        _driver: localforageSsatbDriver.DRIVER_NAME,\r\n        _initStorage: _initStorage,\r\n        _support: true,\r\n        iterate: iterate,\r\n        getItem: getItem,\r\n        setItem: setItem,\r\n        removeItem: removeItem,\r\n        clear: clear,\r\n        length: length,\r\n        key: key,\r\n        keys: keys\r\n    };\r\n    if (moduleType === ModuleType.DEFINE) {\r\n        define(localforageSsatbDriver.DRIVER_NAME, function () {\r\n            return driver;\r\n        });\r\n    } else if (moduleType === ModuleType.EXPORT) {\r\n        module.exports = driver;\r\n    } else {\r\n        this[localforageSsatbDriver.DRIVER_NAME] = driver;\r\n    }\r\n\r\n    localforage.defineDriver(driver);\r\n\r\n}).call(window);\r\n","angular.module('SSATB.LocalForage', ['LocalForageModule'])\r\n.provider('ssatbHttp', ['$localForageProvider', function ($localForageProvider) {\r\n\r\n    var _config = {\r\n        driver: [localforageSsatbDriver.DRIVER_NAME]\r\n    };\r\n\r\n    this.config = function (config) {\r\n        if (!angular.isObject(config))\r\n            throw new Error('The config parameter should be an object');\r\n\r\n        _config = angular.extend(_config, config);\r\n        $localForageProvider.config(_config);\r\n    };\r\n\r\n    var interceptorFactories = this.interceptors = [];\r\n\r\n    function getApiNameByUrl(url) {\r\n\r\n        if (!angular.isObject(_config.apiInfo))\r\n            return null;\r\n\r\n        var service = null;\r\n        angular.forEach(_config.apiInfo, function (value, key) {\r\n            if (url.toLowerCase().indexOf(value.Url.toLowerCase()) === 0) {\r\n                service = key;\r\n            }\r\n        });\r\n        return service;\r\n    }\r\n\r\n    this.$get = ['$localForage', '$q', '$injector', function ($localForage, $q, $injector) {\r\n\r\n        var reversedInterceptors = [];\r\n        angular.forEach(interceptorFactories, function (interceptorFactory) {\r\n            reversedInterceptors.unshift(angular.isString(interceptorFactory)\r\n                ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\r\n        });\r\n\r\n        function ssatbHttp(requestConfig) {\r\n\r\n            if (!angular.isObject(requestConfig))\r\n                throw new Error('Http request configuration must be an object.');\r\n            if (!angular.isString(requestConfig.url))\r\n                throw new Error('Http request configuration url must be a string.');\r\n\r\n            var config = angular.extend({\r\n                method: 'get'\r\n            }, requestConfig);\r\n\r\n            config.method = angular.uppercase(config.method);\r\n\r\n            var service = getApiNameByUrl(requestConfig.url);\r\n            if (service === null)\r\n                throw new Error('No matching apiInfo was found in the provider configuration for the service URL ' + requestConfig.url);\r\n\r\n            var requestInterceptors = [];\r\n            var responseInterceptors = [];\r\n            var promise = $q.when(config);\r\n\r\n            // apply interceptors\r\n            angular.forEach(reversedInterceptors, function (interceptor) {\r\n                if (interceptor.request || interceptor.requestError) {\r\n                    requestInterceptors.unshift(interceptor.request, interceptor.requestError);\r\n                }\r\n                if (interceptor.response || interceptor.responseError) {\r\n                    responseInterceptors.push(interceptor.response, interceptor.responseError);\r\n                }\r\n            });\r\n\r\n            promise = chainInterceptors(promise, requestInterceptors);\r\n            promise = promise.then(function (result) {\r\n                var apiInfo = _config.apiInfo[service];\r\n                var key = service + '|' + config.method + '|' + requestConfig.url.substring(apiInfo.Url.length);\r\n                if (config.method === 'GET')\r\n                    return $localForage.getItem(key);\r\n                else\r\n                    if (config.method === 'DELETE')\r\n                        return $localForage.removeItem(key);\r\n                    else\r\n                        return $localForage.setItem(key, requestConfig.data);\r\n\r\n            });\r\n            promise = promise.then(function (response) {\r\n                if (response != null)\r\n                    response.config = config;\r\n                else\r\n                    return { config: config };\r\n                return response;\r\n\r\n            }, function (response) {\r\n                if (response != null) {\r\n                    response.config = config\r\n                    throw response\r\n                }\r\n                else {\r\n                    throw new { config: config };\r\n                }\r\n            });\r\n\r\n            return chainInterceptors(promise, responseInterceptors);\r\n        }\r\n\r\n        createShortMethods('get', 'delete');\r\n        createShortMethodsWithData('post', 'put');\r\n\r\n        return ssatbHttp;\r\n\r\n        function createShortMethods(names) {\r\n            angular.forEach(arguments, function (name) {\r\n                ssatbHttp[name] = function (url, config) {\r\n                    return ssatbHttp(angular.extend({}, config || {}, {\r\n                        method: name,\r\n                        url: url\r\n                    }));\r\n                };\r\n            });\r\n        }\r\n\r\n        function createShortMethodsWithData(name) {\r\n            angular.forEach(arguments, function (name) {\r\n                ssatbHttp[name] = function (url, data, config) {\r\n                    return ssatbHttp(angular.extend({}, config || {}, {\r\n                        method: name,\r\n                        url: url,\r\n                        data: data\r\n                    }));\r\n                };\r\n            });\r\n        }\r\n        function chainInterceptors(promise, interceptors) {\r\n            for (var i = 0, ii = interceptors.length; i < ii;) {\r\n                var thenFn = interceptors[i++];\r\n                var rejectFn = interceptors[i++];\r\n                promise = promise.then(thenFn, rejectFn);\r\n            }\r\n            interceptors.length = 0;\r\n            return promise;\r\n        }\r\n\r\n    }];\r\n\r\n}]);","(function () {\r\n    var authTokenRefreshService = (\r\n    function authTokenRefreshService($window, $http) {\r\n        this.$window = $window;\r\n        this.$http = $http;\r\n        return {\r\n            refreshToken: refreshToken\r\n        }\r\n        function refreshToken(refreshTokenBaseUrl,serviceName) {\r\n            var refreshTokenUrl = refreshTokenBaseUrl + '?serviceName=' + serviceName;\r\n\r\n            return $http.get(refreshTokenUrl).then(refreshTokenComplete);\r\n\r\n            function refreshTokenComplete(response) {\r\n                return response;\r\n            }\r\n        }\r\n    }\r\n);\r\n\r\n    var messageInterceptorsConfig = function ($provide, provider) {\r\n        // push function to the interceptors which will intercept all the http responses\r\n        provider.interceptors.push(['$q', '$injector', '$localForage', function ($q, $injector, $localForage) {\r\n            return {\r\n                responseError: function (errorResponse) {\r\n                    var deferred = $q.defer();\r\n                    var apiInfoObject = $localForage._localforage._apiInfo;\r\n                    var serviceName = getServiceNameFromApiInfo(apiInfoObject, errorResponse);\r\n                    var config = $injector.get('ssatbAuthTokenRefreshConfig');\r\n                    if (serviceName != null && config.refreshTokenUrl != null && !angular.isUndefined(errorResponse.config) && errorResponse.config != null\r\n                                && (angular.isUndefined(errorResponse.config.retry) || errorResponse.config.retry == false)\r\n                                    && errorResponse.status === 401) {\r\n                        $injector.get('authTokenRefreshService').refreshToken(config.refreshTokenUrl, serviceName).then(function (response) {\r\n                            var apiInfo = apiInfoObject[errorResponse.serviceName];\r\n                            apiInfo.Headers = response.data;\r\n                            _retrySsatbHttpRequest(errorResponse.config, deferred, $injector);\r\n                        }, function () {\r\n                            if (!angular.isUndefined(errorResponse.errorHandler) && config.errorHandler != null)\r\n                                config.errorHandler('An unexpected error occurred.  For assistance, please email info@enrollment.org.');\r\n                            deferred.reject(errorResponse);\r\n                        });\r\n                    } else {\r\n                        if (!angular.isUndefined(errorResponse.errorHandler) && config.errorHandler != null)\r\n                            config.errorHandler('An unexpected error occurred.  For assistance, please email info@enrollment.org.');\r\n                        deferred.reject(errorResponse);\r\n                    }\r\n                    return deferred.promise;\r\n\r\n                    function getServiceNameFromApiInfo(apiInfoObject, errorResponse)\r\n                    {\r\n                        if (errorResponse.serviceName == null)\r\n                            return null;\r\n                        var apiInfo = apiInfoObject[errorResponse.serviceName];\r\n                        if (apiInfo == null)\r\n                            return null;\r\n                        return apiInfo.ServiceName;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        ])\r\n    };\r\n    var _retrySsatbHttpRequest = function (config, deferred, $injector) {\r\n        $ssatbHttp = $injector.get('ssatbHttp');\r\n        config.retry = true;\r\n        $ssatbHttp(config).then(function (response) {\r\n            deferred.resolve(response);\r\n        }, function (response) {\r\n            alertDialog('An unexpected error occurred.  For assistance, please email info@enrollment.org.');\r\n            deferred.reject(response);\r\n        });\r\n    }\r\n    angular.module('ssatb.authtokenrefresh', ['SSATB.LocalForage'])\r\n        .provider('ssatbAuthTokenRefreshConfig', ['ssatbHttpProvider', function (ssatbHttpProvider) {\r\n            var _config = {};\r\n            this.config = function (config)\r\n            {\r\n                if (!angular.isObject(config))\r\n                    throw new Error('The config parameter should be an object');\r\n                _config = config;\r\n            }\r\n            this.$get = function () {\r\n                return _config;\r\n            }\r\n            }])\r\n        .config(['$provide', 'ssatbHttpProvider', messageInterceptorsConfig])\r\n      .service('authTokenRefreshService', ['$window', '$http', authTokenRefreshService]);\r\n})();\r\n"],"sourceRoot":"/source/"}