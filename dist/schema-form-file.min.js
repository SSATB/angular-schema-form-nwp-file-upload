"use strict";angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,i,a){var l="Wrong file type. Allowed types are ",r="This file is too large. Maximum size allowed is ",t="Current file size:",s="You have to upload at least one file",o="You can't upload more than one file.",n=2e6,m=function(i,m,d){if("array"===m.type&&"singlefile"===m.format){m.pattern&&m.pattern.mimeType&&!m.pattern.validationMessage&&(m.pattern.validationMessage=l),m.maxSize&&m.maxSize.maximum&&!m.maxSize.validationMessage&&(m.maxSize.validationMessage=r,m.maxSize.validationMessage2=t),m.minItems&&m.minItems.minimum&&!m.minItems.validationMessage&&(m.minItems.validationMessage=s),m.maxItems&&m.maxItems.maximum&&!m.maxItems.validationMessage&&(m.maxItems.validationMessage=o),(angular.isUndefined(m.chunkedFileSize)||null==m.chunkedFileSize)&&(m.chunkedFileSize=n);var p=e.stdFormObj(i,m,d);return p.key=d.path,p.type="nwpFileUpload",d.lookup[a.stringify(d.path)]=p,p}};e.defaults.array.unshift(m);var d=function(i,m,d){if("array"===m.type&&"multifile"===m.format){m.pattern&&m.pattern.mimeType&&!m.pattern.validationMessage&&(m.pattern.validationMessage=l),m.maxSize&&m.maxSize.maximum&&!m.maxSize.validationMessage&&(m.maxSize.validationMessage=r,m.maxSize.validationMessage2=t),m.minItems&&m.minItems.minimum&&!m.minItems.validationMessage&&(m.minItems.validationMessage=s),m.maxItems&&m.maxItems.maximum&&!m.maxItems.validationMessage&&(m.maxItems.validationMessage=o),(angular.isUndefined(m.chunkedFileSize)||null==m.chunkedFileSize)&&(m.chunkedFileSize=n);var p=e.stdFormObj(i,m,d);return p.key=d.path,p.type="nwpFileUpload",d.lookup[a.stringify(d.path)]=p,p}};e.defaults.array.unshift(d),i.addMapping("bootstrapDecorator","nwpFileUpload","directives/decorators/bootstrap/nwp-file/nwp-file.html")}]),angular.module("ngSchemaFormFile",["ngFileUpload","ngMessages","SSATB.LocalForage"]).directive("ngSchemaFile",["Upload","$timeout","$q","$localForage","ssatbHttp",function(e,i,a,l,r){return{restrict:"A",scope:!0,require:"ngModel",link:function(a,t,s,o){function n(e){for(var i in e){var a=e[i].ServiceName;if(null!=a&&"ssatb.fileservice"==a.toLowerCase().trim())return e[i]}return null}function m(e){var i=a.apiInfo,l=i.Url+"/api/v1/storageDomains/"+a.storageDomain+"/files/"+e;return r.get(l).then(function(e){return e})}function d(e){return m(e).then(function(e){e.name=e.properties.fileName,a.uploadedFiles.push(e)})}function p(e){a.selectFile(e);var i=a.apiInfo;if(e&&!e.$error&&i&&a.storageDomain){var l=i.Url+"/api/v1/storageDomains/"+a.storageDomain+"/files",t={file:e};if(null!=a.metaData)for(var s in a.metaData)t["x-file-metadata-"+s]=a.metaData[s];var o={url:l,data:t,headers:i.Headers};if(e.size>a.form.schema.chunkedFileSize){var n=i.Url+"/api/v1/storageDomains/"+a.storageDomain+"/chunked/files",m={"Content-Type":e.type,"Content-Disposition":'filename="'+e.name+'"'};if(null!=a.metaData)for(var s in a.metaData)m[s]=a.metaData[s];r.post(n,m).then(function(i){var l=i.response;o.resumeSizeUrl=n+"/"+l,o.url=n+"/"+l,o.resumeChunkSize=a.form.schema.chunkedFileSize,o.resumeSizeResponseReader=function(e){return e.properties.contentLength},c(e,o,l),e.upload.progress(function(i){e.progress=Math.min(100,parseInt(100*i.loaded/i.total))})})}else c(e,o),e.upload.progress(function(i){e.progress=Math.min(100,parseInt(100*i.loaded/i.total))})}}function c(l,r,t){l.upload=e.upload(r),a.fileUploading=!0,l.upload.then(function(e){i(function(){l.result=e.data}),(angular.isUndefined(o.$modelValue)||null==o.$modelValue)&&o.$setViewValue([]);var r=o.$modelValue;angular.isUndefined(t)&&(t=e.data),r.push(t),o.$setViewValue(r),o.$commitViewValue(),d(t).then(function(){a.fileUploading=!1})},function(e){e.status>0&&(a.errorMsg=e.status+": "+e.data)})}a.storageDomain=a.form&&a.form.storageDomain,a.metaData=a.form&&a.form.metaData,a.uploadedFiles=[],a.apiInfo=n(l._localforage._config.apiInfo),a.isSinglefileUpload=a.form&&a.form.schema&&"singlefile"===a.form.schema.format,a.uploadOnFileSelect=a.form&&a.form.uploadOnFileSelect,a.fileUploading=!1,o.$render=function(){null!=o.$modelValue&&angular.forEach(o.$modelValue,function(e,i){d(e)})},a.selectFile=function(e){a.picFile=e},a.selectFiles=function(e){a.picFiles=e},a.uploadFile=function(e){e&&p(e)},a.uploadFiles=function(e){e.length&&angular.forEach(e,function(e){p(e)})},a.deleteFile=function(e){var i=a.apiInfo,l=i.Url+"/api/v1/storageDomains/"+a.storageDomain+"/files/"+e.fileId;r["delete"](l).then(function(){var i=a.uploadedFiles.indexOf(e);a.uploadedFiles.splice(i,1);var l=o.$modelValue,r=l.indexOf(e.fileId);r!=-1&&(l.splice(r,1),o.$setViewValue(l),o.$commitViewValue())})},a.validateField=function(){a.uploadForm.file&&a.uploadForm.file.$valid&&a.picFile&&!a.picFile.$error?console.log("singlefile-form is invalid"):a.uploadForm.files&&a.uploadForm.files.$valid&&a.picFiles&&!a.picFiles.$error?console.log("multifile-form is  invalid"):console.log("single- and multifile-form are valid")},a.submit=function(){a.uploadForm.file&&a.uploadForm.file.$valid&&a.picFile&&!a.picFile.$error?a.uploadFile(a.picFile):a.uploadForm.files&&a.uploadForm.files.$valid&&a.picFiles&&!a.picFiles.$error&&a.uploadFiles(a.picFiles)},a.$on("schemaFormValidate",a.validateField),a.$on("schemaFormFileUploadSubmit",a.submit)}}}]),function(e){try{e=angular.module("schemaForm")}catch(i){e=angular.module("schemaForm",[])}e.run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/nwp-file/nwp-file.html",'<ng-form class="file-upload mb-lg" ng-schema-file="" ng-model="$$value$$" name="uploadForm"><label ng-show="form.title && form.notitle !== true" class="control-label" for="fileInputButton" ng-class="{\'sr-only\': !showTitle(), \'text-danger\': uploadForm.$error.required && !uploadForm.$pristine}">{{ form.title }}<i ng-show="form.required">&nbsp;*</i></label><div ng-hide="uploadOnFileSelect"><div ng-show="picFile"><div ng-include="\'uploadProcess.html\'" class="mb"></div></div><ul ng-show="picFiles && picFiles.length" class="list-group"><li class="list-group-item" ng-repeat="picFile in picFiles"><div ng-include="\'uploadProcess.html\'"></div></li></ul></div><div class="bg-white mb" ng-class="{\'has-error border-danger\': (uploadForm.$error.required && !uploadForm.$pristine) || (hasError() && errorMessage(schemaError()))}"><small class="text-muted" ng-show="form.description" ng-bind-html="form.description"></small><div ng-if="isSinglefileUpload" ng-include="" src="form.templateUrlFileUpload ? form.templateUrlFileUpload : \'singleFileUpload.html\'"></div><div ng-if="!isSinglefileUpload" ng-include="form.templateUrlFileUpload ? form.templateUrlFileUpload : \'multiFileUpload.html\'"></div><div class="help-block mb0" ng-show="uploadForm.$error.required && !uploadForm.$pristine">{{ \'modules.attribute.fields.required.caption\' | translate }}</div><div class="help-block mb0" ng-show="(hasError() && errorMessage(schemaError()))" ng-bind-html="(hasError() && errorMessage(schemaError()))"></div></div></ng-form><script type="text/ng-template" id="uploadProcess.html"><div class="row mb"> <div class="col-sm-4 mb-sm"> <label title="{{ \'modules.upload.field.preview\' | translate }}" class="text-info"> {{ \'modules.upload.field.preview\' | translate }} </label> <img ngf-src="picFile" class="img-thumbnail img-responsive"> <div class="img-placeholder" ng-class="{\'show\': picFile.$invalid && !picFile.blobUrl, \'hide\': !picFile || picFile.blobUrl}"> No preview available </div> </div> <div class="col-sm-4 mb-sm"> <label title="{{ \'modules.upload.field.filename\' | translate }}" class="text-info"> {{ \'modules.upload.field.filename\' | translate }} </label> <div class="filename" title="{{ picFile.name }}">{{ picFile.name }}</div> </div> <div class="col-sm-4 mb-sm"> <label title="{{ \'modules.upload.field.progress\' | translate }}" class="text-info"> {{ \'modules.upload.field.progress\' | translate }} </label> <div class="progress"> <div class="progress-bar progress-bar-striped" role="progressbar" ng-class="{\'progress-bar-success\': picFile.progress == 100}" ng-style="{width: picFile.progress + \'%\'}"> {{ picFile.progress }} % </div> </div> <button class="btn btn-primary btn-sm" type="button" ng-click="uploadFile(picFile)" ng-disabled="!picFile || picFile.$error"> {{ "buttons.upload" | translate }} </button> </div> </div> <div ng-messages="uploadForm.$error" ng-messages-multiple=""> <div class="text-danger errorMsg" ng-message="maxSize">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong>. ({{ form.schema[picFile.$error].validationMessage2 | translate }} <strong>{{picFile.size / 1000000|number:1}}MB</strong>)</div> <div class="text-danger errorMsg" ng-message="pattern">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div> <div class="text-danger errorMsg" ng-message="maxItems">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div> <div class="text-danger errorMsg" ng-message="minItems">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div> <div class="text-danger errorMsg" ng-show="errorMsg">{{errorMsg}}</div> </div></script><script type="text/ng-template" id="singleFileUpload.html"><div ngf-drop="selectFile(picFile)" ngf-select="selectFile(picFile)" type="file" ngf-multiple="false" ng-model="picFile" name="file" ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}" ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}" ng-required="form.required" accept="{{form.schema.pattern && form.schema.pattern.mimeType}}" ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription"> <p class="text-center">{{ \'modules.upload.descriptionSinglefile\' | translate }}</p> </div> <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div> <button ngf-select="selectFile(picFile)" type="file" ngf-multiple="false" ng-model="picFile" name="file" ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}" ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}" ng-required="form.required" accept="{{form.schema.pattern && form.schema.pattern.mimeType}}" ng-model-options="form.ngModelOptions" id="fileInputButton" class="btn btn-primary btn-block {{form.htmlClass}} mt-lg mb"> <fa fw="fw" name="upload" class="mr-sm"></fa> {{ "buttons.add" | translate }} </button></script><script type="text/ng-template" id="multiFileUpload.html"><div ngf-drop="selectFiles(picFiles)" ngf-select="selectFiles(picFiles)" type="file" ngf-multiple="true" ng-model="picFiles" name="files" ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}" ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}" ng-required="form.required" accept="{{form.schema.pattern && form.schema.pattern.mimeType}}" ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription"> <p class="text-center">{{ \'modules.upload.descriptionMultifile\' | translate }}</p> </div> <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div> <button ngf-select="selectFiles(picFiles)" type="file" ngf-multiple="true" multiple ng-model="picFiles" name="files" accept="{{form.schema.pattern && form.schema.pattern.mimeType}}" ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}" ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}" ng-required="form.required" ng-model-options="form.ngModelOptions" id="fileInputButton" class="btn btn-primary btn-block {{form.htmlClass}} mt-lg mb"> <fa fw="fw" name="upload" class="mr-sm"></fa> {{ "buttons.add" | translate }} </button></script>')}])}();